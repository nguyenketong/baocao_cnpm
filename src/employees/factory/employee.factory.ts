import { BadRequestException, Injectable, NotFoundException, UnauthorizedException } from "@nestjs/common";
import { InjectModel } from "@nestjs/mongoose";
import { Model, Types } from "mongoose";
import { AccountService } from "src/accounts/accounts.service";
import { DepartmentService } from "src/departments/departments.service";
import { DesignationService } from "src/designations/designations.service";
import { ProjectPermissionsService } from "src/projectpermissions/projectpermissions.service";
import { Account } from "src/schemas/Account.schema";
import { Employee } from "src/schemas/Employee.schema";
import { Project } from "src/schemas/Project.schema";
import { ProjectPermissions } from "src/schemas/ProjectPermissions.schema";
import { Team } from "src/schemas/Team.schema";
import { CreateEmployeeDto } from "../dto/CreateEmployee.dto";
import { CreateProjectPermissionsDto } from "src/projectpermissions/dto/CreateProjectPermission.dto";
import { UpdateEmployeeDto } from "../dto/UpdateEmployee.dto";

@Injectable()
export class EmployeeFactory {
    constructor(
        @InjectModel(Employee.name) private employeeModel: Model<Employee>,
        @InjectModel(Team.name) private teamModel: Model<Team>,
        @InjectModel(Project.name) private projectModel: Model<Project>,
        @InjectModel(Account.name) private accountModel: Model<Account>,
        @InjectModel(ProjectPermissions.name) private projectPermissionsModel: Model<ProjectPermissions>,
        private departmentService: DepartmentService,
        private designationService: DesignationService,
        private projectPermissionService: ProjectPermissionsService,
        private accountService: AccountService,
    ) { }

    async create({ account, projectpermission, ...createEmployee }: CreateEmployeeDto): Promise<Employee> {
        let savedAccounts: Account | null = null;
        let savedProjectPermissions: Types.ObjectId[] = [];

        // X·ª≠ l√Ω t√†i kho·∫£n n·∫øu c√≥
        if (account) {
            const createdAccounts = new this.accountModel(account);
            savedAccounts = await createdAccounts.save();
        }

        // X·ª≠ l√Ω danh s√°ch quy·ªÅn tr√™n d·ª± √°n n·∫øu c√≥
        if (projectpermission && projectpermission.length > 0) {
            const createdProjectPermissions = await this.projectPermissionsModel.insertMany(projectpermission) as CreateProjectPermissionsDto[];

            // Chuy·ªÉn ƒë·ªïi _id th√†nh ObjectId v√† ki·ªÉm tra ki·ªÉu d·ªØ li·ªáu
            savedProjectPermissions = createdProjectPermissions
                .map(permission => ('_id' in permission ? permission._id : null))
                .filter((id): id is Types.ObjectId => id !== null);
        }

        const { department_id, designation_id } = createEmployee;

        // Ki·ªÉm tra department_id h·ª£p l·ªá
        if (department_id) {
            const departmentExists = await this.departmentService.getDepartmentById(department_id);
            if (!departmentExists) {
                throw new NotFoundException('Department kh√¥ng t·ªìn t·∫°i');
            }
        }

        // Ki·ªÉm tra designation_id h·ª£p l·ªá
        if (designation_id) {
            const designationExists = await this.designationService.getDesignationById(designation_id);
            if (!designationExists) {
                throw new NotFoundException('Designation kh√¥ng t·ªìn t·∫°i');
            }
        }

        // T·∫°o nh√¢n vi√™n v·ªõi d·ªØ li·ªáu ƒë·∫ßy ƒë·ªß
        const newEmployee = new this.employeeModel({
            ...createEmployee,
            account: savedAccounts?._id || null,
            projectpermission: savedProjectPermissions.length > 0 ? savedProjectPermissions : [],
        });

        return newEmployee.save();
    }

    async getByUsernameOrEmail(email: string): Promise<Employee | null> {
        console.log("üîç ƒêang t√¨m ki·∫øm t√†i kho·∫£n v·ªõi email:", email);

        // T√¨m account tr∆∞·ªõc
        const account = await this.accountModel.findOne({ email }).select("_id userName email password");
        if (!account) {
            console.log("‚ùå Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n.");
            return null;
        }

        console.log("‚úÖ T√¨m th·∫•y t√†i kho·∫£n:", account);

        // T√¨m employee c√≥ li√™n k·∫øt v·ªõi account n√†y
        const employee = await this.employeeModel.findOne({ account: account._id })
            .populate(['department_id', 'designation_id', 'team_id', 'projectpermission'])
            .populate({
                path: 'account',
                model: 'Account',
                select: 'userName email password',
            })
            .exec();

        console.log("üìå D·ªØ li·ªáu nh√¢n vi√™n t·ª´ DB:", employee);

        return employee;
    }

    async getAll(): Promise<Employee[]> {
        return await this.employeeModel
            .find()
            .populate('department_id')
            .populate('designation_id')
            .populate('account')
            .populate('team_id')
            .populate('projectpermission')
            .exec();
    }

    async getById(id: Types.ObjectId | string): Promise<Employee> {
        if (!Types.ObjectId.isValid(id)) {
            throw new NotFoundException('ID kh√¥ng h·ª£p l·ªá');
        }

        const employee = await this.employeeModel
            .findById(id)
            .populate('department_id')
            .populate('designation_id')
            .populate('account')
            .populate('projectpermission')
            .populate('tasks')
            .populate({
                path: 'team_id',
                model: 'Team',
                populate: {
                    path: 'projectid', // Populating project from team
                    model: 'Project',
                },

            })
            .exec();

        if (!employee) {
            throw new NotFoundException('Nh√¢n vi√™n kh√¥ng t·ªìn t·∫°i');
        }
        return employee;
    }

    async getTeamsById(employeeId: string): Promise<Team[]> {
        return this.teamModel
            .find({ teamLead: employeeId })  // Find all teams where the employee is the team lead
            .populate('teamLead')  // Populate the team lead (Employee)
            .populate('projectid')  // Populate the project (Project)
            .exec();
    }

    async getProjectsById(employeeId: string): Promise<Project[]> {
        try {
            return this.projectModel
                .find({
                    assignedPerson: employeeId
                })
                .populate('assignedPerson') // N·∫øu b·∫°n mu·ªën l·∫•y th√¥ng tin ƒë·∫ßy ƒë·ªß c·ªßa nh√¢n vi√™n
                .exec();

        } catch (error) {
            console.error("L·ªói khi l·∫•y d·ª± √°n:", error);
            throw new Error("Kh√¥ng th·ªÉ l·∫•y d·ª± √°n");
        }
    }

    async update(employee_id: string, updateEmployeeDto: UpdateEmployeeDto) {
        const updatedEmployee = await this.employeeModel.findByIdAndUpdate(
            employee_id,
            updateEmployeeDto,
            { new: true }
        ).populate('department_id')
            .populate('designation_id')
            .populate('team_id')
            .populate('account');


        if (!updatedEmployee) {
            throw new NotFoundException('Nh√¢n vi√™n kh√¥ng t·ªìn t·∫°i');
        }

        return updatedEmployee;
    }

    async delete(employee_id: string): Promise<Employee> {
        const deletedEmployee = await this.employeeModel.findByIdAndDelete(employee_id);
        if (!deletedEmployee) {
            throw new NotFoundException('Nh√¢n vi√™n kh√¥ng t·ªìn t·∫°i');
        }
        return deletedEmployee;
    }

    async getProfileFromToken(email: string): Promise<Employee> {
        if (!email) {
            throw new UnauthorizedException("Kh√¥ng c√≥ email trong request");
        }

        console.log("üîç ƒêang t√¨m ki·∫øm nh√¢n vi√™n v·ªõi email:", email);

        const employee = await this.getByUsernameOrEmail(email);
        if (!employee) {
            throw new UnauthorizedException("Kh√¥ng t√¨m th·∫•y th√¥ng tin nh√¢n vi√™n");
            throw new UnauthorizedException("Kh√¥ng t√¨m th·∫•y th√¥ng tin nh√¢n vi√™n");
        }


        return employee;
    }

    async removeTeam(employeeId: string, teamId: string): Promise<Employee> {
        try {
            // Log th√¥ng tin input
            console.log('Removing team from employee:', {
                employeeId,
                teamId,
                timestamp: '2025-02-28 07:53:05'
            });

            // Validate IDs
            if (!Types.ObjectId.isValid(employeeId) || !Types.ObjectId.isValid(teamId)) {
                throw new BadRequestException('ID kh√¥ng h·ª£p l·ªá');
            }

            // T√¨m employee
            const employee = await this.employeeModel.findById(employeeId);
            if (!employee) {
                throw new NotFoundException('Employee kh√¥ng t·ªìn t·∫°i');
            }

            // Ki·ªÉm tra team_id array
            const currentTeamIds = employee.team_id || [];
            console.log('Current team IDs:', currentTeamIds.map(id => id.toString()));

            // Ki·ªÉm tra xem employee c√≥ thu·ªôc team kh√¥ng
            const isInTeam = currentTeamIds.some(id => id.toString() === teamId);
            if (!isInTeam) {
                throw new BadRequestException('Employee kh√¥ng thu·ªôc team n√†y');
            }

            // L·ªçc b·ªè teamId c·∫ßn x√≥a
            const updatedTeamIds = currentTeamIds.filter(
                id => id.toString() !== teamId
            );

            console.log('Updated team IDs:', updatedTeamIds.map(id => id.toString()));

            // C·∫≠p nh·∫≠t tr·ª±c ti·∫øp v√†o database
            const updatedEmployee = await this.employeeModel.findByIdAndUpdate(
                employeeId,
                {
                    $set: {
                        team_id: updatedTeamIds,
                        lastModifiedAt: '2025-02-28 07:53:05',
                        lastModifiedBy: 'HMK1510'
                    }
                },
                {
                    new: true,
                    runValidators: true
                }
            ).populate(['department_id', 'designation_id', 'team_id', 'account']);

            if (!updatedEmployee) {
                throw new BadRequestException('Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t th√¥ng tin employee');
            }

            // Verify update
            const verifiedEmployee = await this.employeeModel.findById(employeeId);
            console.log('Verification after update:', {
                id: verifiedEmployee?._id,
                teams: verifiedEmployee?.team_id?.map(id => id.toString())
            });

            return updatedEmployee;

        } catch (error) {
            console.error('Error removing team from employee:', {
                error: error.message,
                stack: error.stack,
                employeeId,
                teamId
            });

            if (error instanceof BadRequestException || error instanceof NotFoundException) {
                throw error;
            }

            throw new BadRequestException(
                'Kh√¥ng th·ªÉ x√≥a team kh·ªèi employee. Vui l√≤ng th·ª≠ l·∫°i sau.'
            );
        }
    }

    async getByTeamId(teamId: string): Promise<Employee[]> {
        // Validate teamId format
        if (!Types.ObjectId.isValid(teamId)) {
            throw new NotFoundException('Team ID kh√¥ng h·ª£p l·ªá');
        }

        try {
            // Find all employees that have this teamId in their team_id array
            const employees = await this.employeeModel
                .find({ team_id: teamId })
                .populate([
                    {
                        path: 'department_id',
                        select: 'departmentName description'
                    },
                    {
                        path: 'designation_id',
                        select: 'designationName description'
                    },
                    {
                        path: 'account',
                        select: 'userName email' // Exclude sensitive data like password
                    },
                    {
                        path: 'team_id',
                        select: 'teamName teamLead projectid'
                    },
                    {
                        path: 'projectpermission',
                        select: 'projectid permissions'
                    }
                ])
                .exec();

            // Log the operation for audit purposes
            console.log(`[${new Date('2025-02-25 10:01:46').toISOString()}] User HMK1510 retrieved ${employees.length} employees for team ${teamId}`);

            // Return the Employee documents directly
            return employees;

        } catch (error) {
            console.error('Error fetching employees by team ID:', error);
            throw new NotFoundException(
                'Kh√¥ng th·ªÉ t√¨m th·∫•y nh√¢n vi√™n cho team n√†y. Vui l√≤ng th·ª≠ l·∫°i sau.'
            );
        }
    }
}