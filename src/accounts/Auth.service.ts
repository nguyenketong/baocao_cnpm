import { Injectable, UnauthorizedException } from '@nestjs/common';
import { LoginDto } from './dto/login.dto';
import { EmployeeService } from '../employees/employees.service'; // Gi·∫£ s·ª≠ b·∫°n c√≥ m·ªôt service ƒë·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng
import { JwtService } from '@nestjs/jwt';
import { Employee } from 'src/schemas/Employee.schema';

@Injectable()
export class AuthService {
  constructor(
    private readonly employeeService: EmployeeService,
    private readonly jwtService: JwtService,
  ) {}

  async validateUser(loginDto: LoginDto): Promise<{ token: string; employee: Employee }> {
    console.log("ƒêƒÉng nh·∫≠p v·ªõi:", loginDto);

    const user = await this.employeeService.getEmployeeByUsernameOrEmail(loginDto.email);
    console.log("üìå D·ªØ li·ªáu t·ª´ DB:", user);

    // Ki·ªÉm tra n·∫øu user kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng c√≥ t√†i kho·∫£n
    if (!user || !user.account || typeof user.account !== 'object' || !('password' in user.account)) {
        throw new UnauthorizedException('Th√¥ng tin ƒëƒÉng nh·∫≠p kh√¥ng h·ª£p l·ªá');
    }

    // Ki·ªÉm tra m·∫≠t kh·∫©u
    if (user.account.password !== loginDto.password) {
        throw new UnauthorizedException('M·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c');
    }

    const token = this.jwtService.sign({ id: user._id });

    console.log("‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng, t·∫°o token:", token);
    return { token, employee: user }; // Tr·∫£ v·ªÅ c·∫£ token v√† th√¥ng tin nh√¢n vi√™n
}



}